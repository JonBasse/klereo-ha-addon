#!/usr/bin/env python3
"""
Klereo Pool Manager Add-on for Home Assistant
Main application entry point
"""

import asyncio
import logging
import json
import os
import sys
import signal
from typing import Optional
from datetime import datetime
import time

# Add current directory to path for imports
sys.path.insert(0, '/usr/bin')

from klereo_api import KlereoAPI
from ha_integration import HomeAssistantIntegration

class KlereoAddon:
    """Main Klereo add-on application"""
    
    def __init__(self):
        """Initialize the add-on"""
        self.running = True
        self.api_client = None
        self.ha_integration = None
        self.logger = None
        self.config = {}
        
        # Setup logging
        self._setup_logging()
        
        # Load configuration
        self._load_config()
        
        # Setup signal handlers
        signal.signal(signal.SIGTERM, self._signal_handler)
        signal.signal(signal.SIGINT, self._signal_handler)
    
    def _setup_logging(self):
        """Setup logging configuration"""
        # Load config first to get log level
        if os.path.exists('/data/options.json'):
            try:
                with open('/data/options.json', 'r') as f:
                    temp_config = json.load(f)
                    log_level = temp_config.get('log_level', 'info').upper()
            except:
                log_level = 'INFO'
        else:
            log_level = os.getenv('LOG_LEVEL', 'INFO').upper()
        
        logging.basicConfig(
            level=getattr(logging, log_level),
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.StreamHandler(sys.stdout),
                logging.FileHandler('/var/log/klereo.log')
            ]
        )
        
        self.logger = logging.getLogger('klereo')
        self.logger.info("Klereo Pool Manager Add-on starting...")
    
    def _load_config(self):
        """Load configuration from options"""
        try:
            # Try to load from Supervisor options
            if os.path.exists('/data/options.json'):
                with open('/data/options.json', 'r') as f:
                    self.config = json.load(f)
            else:
                # Fallback to environment variables
                self.config = {
                    'klereo_username': os.getenv('KLEREO_USERNAME', ''),
                    'klereo_password': os.getenv('KLEREO_PASSWORD', ''),
                    'update_interval': int(os.getenv('UPDATE_INTERVAL', '600')),
                    'log_level': os.getenv('LOG_LEVEL', 'info')
                }
            
            # Validate required configuration
            if not self.config.get('klereo_username'):
                raise ValueError("Klereo username is required")
            if not self.config.get('klereo_password'):
                raise ValueError("Klereo password is required")
            
            self.logger.info("Configuration loaded successfully")
            
        except Exception as e:
            self.logger.error(f"Configuration error: {e}")
            sys.exit(1)
    
    def _signal_handler(self, signum, frame):
        """Handle shutdown signals"""
        self.logger.info(f"Received signal {signum}, shutting down...")
        self.running = False
    
    async def _initialize_clients(self):
        """Initialize API clients"""
        try:
            # Initialize Klereo API client
            self.api_client = KlereoAPI(
                username=self.config['klereo_username'],
                password=self.config['klereo_password'],
                logger=self.logger
            )
            
            # Test Klereo connection
            if not self.api_client.test_connection():
                raise Exception("Failed to connect to Klereo API")
            
            self.logger.info("Klereo API connection successful")
            
            # Initialize Home Assistant integration
            # Home Assistant add-ons automatically have access to supervisor API
            ha_url = 'http://supervisor/core'
            ha_token = os.getenv('SUPERVISOR_TOKEN', '')
            
            self.ha_integration = HomeAssistantIntegration(
                ha_url=ha_url,
                ha_token=ha_token,
                api_client=self.api_client,
                logger=self.logger
            )
            
            # Test Home Assistant connection
            if not await self.ha_integration.test_ha_connection():
                raise Exception("Failed to connect to Home Assistant API")
            
            self.logger.info("Home Assistant connection successful")
            
        except Exception as e:
            self.logger.error(f"Client initialization failed: {e}")
            raise
    
    async def _initial_discovery(self):
        """Perform initial pool discovery and registration"""
        try:
            self.logger.info("Starting pool discovery...")
            
            if await self.ha_integration.discover_and_register_pools():
                self.logger.info("Pool discovery completed successfully")
                
                # Initial sensor update
                if await self.ha_integration.update_all_sensors():
                    self.logger.info("Initial sensor update completed")
                else:
                    self.logger.warning("Initial sensor update failed")
            else:
                self.logger.error("Pool discovery failed")
                
        except Exception as e:
            self.logger.error(f"Discovery failed: {e}")
            raise
    
    async def _update_cycle(self):
        """Main update cycle"""
        try:
            if await self.ha_integration.update_all_sensors():
                self.logger.debug("Sensor update completed")
            else:
                self.logger.warning("Sensor update failed")
                
        except Exception as e:
            self.logger.error(f"Update cycle failed: {e}")
    
    async def _health_check(self):
        """Perform health check"""
        try:
            # Test API connection
            if not self.api_client.test_connection():
                self.logger.warning("Klereo API health check failed")
                return False
            
            # Test Home Assistant connection
            if not await self.ha_integration.test_ha_connection():
                self.logger.warning("Home Assistant health check failed")
                return False
            
            return True
            
        except Exception as e:
            self.logger.error(f"Health check failed: {e}")
            return False
    
    async def run(self):
        """Main application loop"""
        try:
            # Initialize clients
            await self._initialize_clients()
            
            # Initial discovery
            await self._initial_discovery()
            
            # Main loop
            update_interval = self.config.get('update_interval', 600)
            last_update = 0
            last_health_check = 0
            health_check_interval = 1800  # 30 minutes
            
            self.logger.info(f"Starting main loop with {update_interval}s update interval")
            
            while self.running:
                current_time = time.time()
                
                # Update sensors
                if current_time - last_update >= update_interval:
                    await self._update_cycle()
                    last_update = current_time
                
                # Health check
                if current_time - last_health_check >= health_check_interval:
                    if await self._health_check():
                        self.logger.debug("Health check passed")
                    else:
                        self.logger.warning("Health check failed")
                    last_health_check = current_time
                
                # Sleep for a short interval
                await asyncio.sleep(10)
            
            self.logger.info("Main loop stopped")
            
        except Exception as e:
            self.logger.error(f"Application error: {e}")
            raise
        finally:
            await self._cleanup()
    
    async def _cleanup(self):
        """Clean up resources"""
        self.logger.info("Cleaning up resources...")
        
        try:
            if self.ha_integration:
                await self.ha_integration.cleanup()
            
            if self.api_client:
                self.api_client.clear_cache()
                
        except Exception as e:
            self.logger.error(f"Cleanup error: {e}")
    
    def start(self):
        """Start the add-on"""
        try:
            asyncio.run(self.run())
        except KeyboardInterrupt:
            self.logger.info("Received keyboard interrupt")
        except Exception as e:
            self.logger.error(f"Application failed: {e}")
            sys.exit(1)
        finally:
            self.logger.info("Klereo Pool Manager Add-on stopped")

def main():
    """Main entry point"""
    addon = KlereoAddon()
    addon.start()

if __name__ == "__main__":
    main()